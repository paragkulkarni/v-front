{"ast":null,"code":"import { BehaviorSubject, Subject, tap } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../general/general.service\";\nexport class AuthService {\n  // public token:any;\n  constructor(generalService) {\n    this.generalService = generalService;\n    this.is_loggedIn = new BehaviorSubject(false);\n    this.userLoggedIn = this.is_loggedIn.asObservable();\n    this.accessToken = new Subject();\n    this.token = this.accessToken.asObservable();\n  }\n  login(username, password) {\n    const data = {\n      username: username,\n      password: password\n    };\n    return this.generalService.sendUserData(data).pipe(tap(response => {\n      localStorage.setItem('authToken', response.token);\n      if (response.token) {\n        // this.token = response.token;\n        this.is_loggedIn.next(true);\n        this.accessToken.next(response.token);\n        console.log(response);\n      }\n    }));\n  }\n  logout() {\n    return this.generalService.userLogout();\n  }\n  static #_ = this.ɵfac = function AuthService_Factory(t) {\n    return new (t || AuthService)(i0.ɵɵinject(i1.GeneralService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: AuthService,\n    factory: AuthService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["BehaviorSubject","Subject","tap","AuthService","constructor","generalService","is_loggedIn","userLoggedIn","asObservable","accessToken","token","login","username","password","data","sendUserData","pipe","response","localStorage","setItem","next","console","log","logout","userLogout","_","i0","ɵɵinject","i1","GeneralService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\parag\\Documents\\python\\fastapi\\v-front\\src\\app\\services\\auth\\auth.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { GeneralService } from '../general/general.service';\nimport { BehaviorSubject, Subject, tap } from 'rxjs';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  private is_loggedIn = new BehaviorSubject<boolean>(false);\n  userLoggedIn = this.is_loggedIn.asObservable();\n  private accessToken = new Subject();\n  token = this.accessToken.asObservable();\n  // public token:any;\n  \n\n  constructor(private generalService: GeneralService) { }\n\n  login(username:any, password:any){\n    const data = {\n      username: username,\n      password: password\n    }\n    return this.generalService.sendUserData(data).pipe(\n      tap((response:any)=>{\n        localStorage.setItem('authToken',response.token)\n        if(response.token){\n          // this.token = response.token;\n          this.is_loggedIn.next(true);\n          this.accessToken.next(response.token)\n          console.log(response)\n        }\n      })\n    )\n  }\n\n  logout(){\n    return this.generalService.userLogout()\n  }\n}\n"],"mappings":"AAEA,SAASA,eAAe,EAAEC,OAAO,EAAEC,GAAG,QAAQ,MAAM;;;AAKpD,OAAM,MAAOC,WAAW;EAKtB;EAGAC,YAAoBC,cAA8B;IAA9B,KAAAA,cAAc,GAAdA,cAAc;IAP1B,KAAAC,WAAW,GAAG,IAAIN,eAAe,CAAU,KAAK,CAAC;IACzD,KAAAO,YAAY,GAAG,IAAI,CAACD,WAAW,CAACE,YAAY,EAAE;IACtC,KAAAC,WAAW,GAAG,IAAIR,OAAO,EAAE;IACnC,KAAAS,KAAK,GAAG,IAAI,CAACD,WAAW,CAACD,YAAY,EAAE;EAIe;EAEtDG,KAAKA,CAACC,QAAY,EAAEC,QAAY;IAC9B,MAAMC,IAAI,GAAG;MACXF,QAAQ,EAAEA,QAAQ;MAClBC,QAAQ,EAAEA;KACX;IACD,OAAO,IAAI,CAACR,cAAc,CAACU,YAAY,CAACD,IAAI,CAAC,CAACE,IAAI,CAChDd,GAAG,CAAEe,QAAY,IAAG;MAClBC,YAAY,CAACC,OAAO,CAAC,WAAW,EAACF,QAAQ,CAACP,KAAK,CAAC;MAChD,IAAGO,QAAQ,CAACP,KAAK,EAAC;QAChB;QACA,IAAI,CAACJ,WAAW,CAACc,IAAI,CAAC,IAAI,CAAC;QAC3B,IAAI,CAACX,WAAW,CAACW,IAAI,CAACH,QAAQ,CAACP,KAAK,CAAC;QACrCW,OAAO,CAACC,GAAG,CAACL,QAAQ,CAAC;;IAEzB,CAAC,CAAC,CACH;EACH;EAEAM,MAAMA,CAAA;IACJ,OAAO,IAAI,CAAClB,cAAc,CAACmB,UAAU,EAAE;EACzC;EAAC,QAAAC,CAAA,G;qBA9BUtB,WAAW,EAAAuB,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,cAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAX3B,WAAW;IAAA4B,OAAA,EAAX5B,WAAW,CAAA6B,IAAA;IAAAC,UAAA,EAFV;EAAM","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}